import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import Icon from '@/components/ui/icon';

interface StepData {
  id: number;
  title: string;
  content: string;
  warning?: string;
  isCompleted: boolean;
}

const Index = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [credentials, setCredentials] = useState({ login: '', password: '' });
  const [completedSteps, setCompletedSteps] = useState<number[]>([]);

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –∏–∑ URL
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const login = urlParams.get('login') || '';
    const password = urlParams.get('password') || '';
    setCredentials({ login, password });
  }, []);

  const steps: StepData[] = [
    {
      id: 1,
      title: "‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
      content: "–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û –í–•–û–î–ò–¢–¨ –í –ü–†–û–§–ò–õ–¨ –°–û –°–ú–ê–†–¢–§–û–ù–ê –ò–õ–ò –ü–ö! –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤—ã–¥–∞—á–µ –±—É–¥–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–æ, –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.",
      warning: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç",
      isCompleted: completedSteps.includes(1)
    },
    {
      id: 2,
      title: "üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      content: "–ù–∞ –∫–æ–Ω—Å–æ–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—ã–µ –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –Ω–∏–∫, –Ω–∞–∂–º–∏—Ç–µ –û–ö.",
      isCompleted: completedSteps.includes(2)
    },
    {
      id: 3,
      title: "üîë –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç",
      content: `–ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å". –ö–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è QR, –≤—ã–±–µ—Ä–∏—Ç–µ "–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è –≤—Ö–æ–¥–∞". –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ${credentials.login || '[–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ URL]'} –∏ –ø–∞—Ä–æ–ª—å: ${credentials.password || '[–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ URL]'}`,
      isCompleted: completedSteps.includes(3)
    },
    {
      id: 4,
      title: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
      content: "–£—Ç–æ—á–Ω–∏—Ç–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ. –ù–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ ‚Üí –°–≤—è–∑–∞—Ç—å ‚Üí –û–ö. –í —Ä–∞–∑–¥–µ–ª–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–Ω–ª–∞–π–Ω-–ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–ö–õ.",
      isCompleted: completedSteps.includes(4)
    },
    {
      id: 5,
      title: "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä",
      content: "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ üè† –î–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. –û—Ç–∫—Ä–æ–π—Ç–µ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∫–∞—Ä—Ç—ã ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–≥—Ä—É ‚Üí –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Üí –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.",
      isCompleted: completedSteps.includes(5)
    },
    {
      id: 6,
      title: "‚úàÔ∏è –í–∞–∂–Ω–∞—è –ø–∞–º—è—Ç–∫–∞",
      content: "–ò–≥—Ä—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤–∫–ª—é—á–∞–π—Ç–µ —Ä–µ–∂–∏–º –ø–æ–ª—ë—Ç–∞! –ù–µ –º–µ–Ω—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–ª—ë—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞.",
      warning: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–π—Ç–µ —Ä–µ–∂–∏–º –ø–æ–ª—ë—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã",
      isCompleted: completedSteps.includes(6)
    }
  ];

  const toggleStepCompletion = (stepId: number) => {
    setCompletedSteps(prev => 
      prev.includes(stepId) 
        ? prev.filter(id => id !== stepId)
        : [...prev, stepId]
    );
  };

  const progress = (completedSteps.length / steps.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 to-orange-100">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-amber-200">
        <div className="max-w-4xl mx-auto px-6 py-4">
          <div className="flex items-center gap-4">
            <img 
              src="https://cdn.poehali.dev/files/1f2f71c9-9139-41ea-b95a-6f66419d9cc0.png" 
              alt="–°—É–Ω–¥—É–∫" 
              className="w-12 h-12 object-contain"
            />
            <div>
              <h1 className="text-2xl font-bold text-gray-900">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</h1>
              <p className="text-gray-600">–ú–∞–≥–∞–∑–∏–Ω –∏–≥—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ "–°—É–Ω–¥—É–∫"</p>
            </div>
          </div>
          
          <div className="mt-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-700">–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>
              <span className="text-sm text-gray-500">{completedSteps.length} –∏–∑ {steps.length}</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-6 py-8">
        <div className="grid lg:grid-cols-4 gap-6">
          {/* Steps Navigation */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">–®–∞–≥–∏</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {steps.map((step) => (
                  <Button
                    key={step.id}
                    variant={currentStep === step.id ? "default" : "ghost"}
                    className={`w-full justify-start text-left h-auto p-3 ${
                      completedSteps.includes(step.id) 
                        ? 'bg-green-50 text-green-700 border-green-200' 
                        : currentStep === step.id 
                        ? 'bg-amber-500 text-white' 
                        : 'hover:bg-amber-50'
                    }`}
                    onClick={() => setCurrentStep(step.id)}
                  >
                    <div className="flex items-center gap-2">
                      {completedSteps.includes(step.id) ? (
                        <Icon name="CheckCircle" size={16} />
                      ) : (
                        <span className="w-6 h-6 rounded-full bg-amber-200 text-amber-800 text-xs flex items-center justify-center font-medium">
                          {step.id}
                        </span>
                      )}
                      <span className="text-sm font-medium truncate">
                        {step.title.replace(/[‚ö†Ô∏èüéÆüîë‚úÖüì•‚úàÔ∏è]/g, '').trim()}
                      </span>
                    </div>
                  </Button>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Current Step Content */}
          <div className="lg:col-span-3">
            <Card className="animate-fade-in">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="text-xl">
                    {steps.find(s => s.id === currentStep)?.title}
                  </CardTitle>
                  <Badge variant={completedSteps.includes(currentStep) ? "default" : "secondary"}>
                    {completedSteps.includes(currentStep) ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                {steps.find(s => s.id === currentStep)?.warning && (
                  <Alert className="border-red-200 bg-red-50">
                    <Icon name="AlertTriangle" size={16} className="text-red-600" />
                    <AlertDescription className="text-red-800">
                      {steps.find(s => s.id === currentStep)?.warning}
                    </AlertDescription>
                  </Alert>
                )}
                
                <div className="prose max-w-none">
                  <p className="text-gray-700 leading-relaxed text-base">
                    {steps.find(s => s.id === currentStep)?.content}
                  </p>
                </div>

                {/* Credentials Display */}
                {currentStep === 3 && (credentials.login || credentials.password) && (
                  <Card className="bg-amber-50 border-amber-200">
                    <CardContent className="pt-6">
                      <h4 className="font-medium mb-3 text-amber-800">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</h4>
                      <div className="space-y-2">
                        <div className="flex gap-2">
                          <span className="font-medium text-amber-700">–õ–æ–≥–∏–Ω:</span>
                          <code className="bg-white px-2 py-1 rounded text-sm border">{credentials.login}</code>
                        </div>
                        <div className="flex gap-2">
                          <span className="font-medium text-amber-700">–ü–∞—Ä–æ–ª—å:</span>
                          <code className="bg-white px-2 py-1 rounded text-sm border">{credentials.password}</code>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Actions */}
                <div className="flex gap-3 pt-4">
                  <Button
                    onClick={() => toggleStepCompletion(currentStep)}
                    variant={completedSteps.includes(currentStep) ? "outline" : "default"}
                    className={completedSteps.includes(currentStep) ? "border-green-300 text-green-700" : "bg-amber-500 hover:bg-amber-600"}
                  >
                    <Icon 
                      name={completedSteps.includes(currentStep) ? "RotateCcw" : "Check"} 
                      size={16} 
                      className="mr-2" 
                    />
                    {completedSteps.includes(currentStep) ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'}
                  </Button>
                  
                  {currentStep < steps.length && (
                    <Button
                      variant="outline"
                      onClick={() => setCurrentStep(currentStep + 1)}
                    >
                      –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                      <Icon name="ChevronRight" size={16} className="ml-2" />
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Index;